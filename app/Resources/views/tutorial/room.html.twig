{% extends 'site_frame.html.twig' %}

{% block stylesheets %}
    {{ parent() }}
    {% stylesheets '@AppBundle/Resources/public/css/tutorial/room.css' %}
        <link rel='stylesheet' href="{{ asset_url }}" />
    {% endstylesheets %}

    <link rel='stylesheet' href='https://fonts.googleapis.com/css?family=Noto+Sans'>
{% endblock %}

{% block body %}
    {{ parent() }}
    <div style="display:table; width: 100%; height: 100%;">
        <div id="media-app"></div>
        <div id="whiteboard-app"></div>
    </div>

    <article>
        <script> var componentFiles = []; </script>

        {% javascripts '@AppBundle/Resources/public/js/tutorial/MediaContainer.js'
                       '@AppBundle/Resources/public/js/tutorial/WhiteBoardController.js'
                       '@AppBundle/Resources/public/js/tutorial/WhiteBoardView.js' %}
            <script src="{{ asset_url }}"></script>
        {% endjavascripts %}

        {% javascripts '@AppBundle/Resources/public/js/tutorial/Elements/FreeCurveView.js' %}
            <script src="{{ asset_url }}"></script>
        {% endjavascripts %}

        {% javascripts '@AppBundle/Resources/public/js/tutorial/Elements/FreeCurveElement.js'
                       '@AppBundle/Resources/public/js/tutorial/fitcurves.js' %}
            <script> componentFiles.push("{{ asset_url }}"); </script>
        {% endjavascripts %}

        {% javascripts '@AppBundle/Resources/public/js/tutorial/Elements/WhiteBoardTextView.js' %}
            <script src="{{ asset_url }}"></script>
        {% endjavascripts %}

        {% javascripts '@AppBundle/Resources/public/js/tutorial/Elements/WhiteBoardTextElement.js'
                       '@AppBundle/Resources/public/js/buffer.js'
                       '@AppBundle/Resources/public/js/fontkit.js' %}
            <script> componentFiles.push("{{ asset_url }}"); </script>
        {% endjavascripts %}

        {% javascripts '@AppBundle/Resources/public/js/tutorial/Elements/UploadView.js' %}
            <script src="{{ asset_url }}"></script>
        {% endjavascripts %}

        {% javascripts '@AppBundle/Resources/public/js/tutorial/Elements/UploadElement.js' %}
            <script> componentFiles.push("{{ asset_url }}"); </script>
        {% endjavascripts %}

        {% javascripts '@AppBundle/Resources/public/js/tutorial/Elements/HighlightView.js' %}
            <script src="{{ asset_url }}"></script>
        {% endjavascripts %}

        {% javascripts '@AppBundle/Resources/public/js/tutorial/Elements/HighlightElement.js' %}
            <script> componentFiles.push("{{ asset_url }}"); </script>
        {% endjavascripts %}

        {% javascripts '@AppBundle/Resources/public/js/tutorial/WhiteBoardWorker.js' output='js/compiled/WhiteBoardWorker.js' %}
            <script> var workerUrlGlobal = "{{ asset_url }}"; </script>
        {% endjavascripts %}
    </article>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="https://cdn.socket.io/socket.io-1.4.5.js"></script>

    {% javascripts '@AppBundle/Resources/public/js/tutorial/EventEmitter.js'
                   '@AppBundle/Resources/public/js/tutorial/util.js'
                   '@AppBundle/Resources/public/js/tutorial/Negotiator.js'
                   '@AppBundle/Resources/public/js/tutorial/PeerHandler.js' %}
        <script src="{{ asset_url }}"></script>
    {% endjavascripts %}

    <script>

        var mediaSocket;
        var boardSocket;
        var localStream;
        var userData = [];
        var medCont;
        var whitCont;
        var peerHandler;
        var localAudio;
        var localVideo;

        var constraintsToChrome_ = function(c)
        {
            if (typeof c !== 'object' || c.mandatory || c.optional)
            {
                return c;
            }
            var cc = {};
            Object.keys(c).forEach(function(key)
            {
                if (key === 'require' || key === 'advanced' || key === 'mediaSource')
                {
                    return;
                }
                var r = (typeof c[key] === 'object') ? c[key] : {ideal: c[key]};
                if (r.exact !== undefined && typeof r.exact === 'number')
                {
                    r.min = r.max = r.exact;
                }
                var oldname_ = function(prefix, name)
                {
                    if (prefix)
                    {
                        return prefix + name.charAt(0).toUpperCase() + name.slice(1);
                    }
                    return (name === 'deviceId') ? 'sourceId' : name;
                };
                if (r.ideal !== undefined)
                {
                    cc.optional = cc.optional || [];
                    var oc = {};
                    if (typeof r.ideal === 'number')
                    {
                        oc[oldname_('min', key)] = r.ideal;
                        cc.optional.push(oc);
                        oc = {};
                        oc[oldname_('max', key)] = r.ideal;
                        cc.optional.push(oc);
                    }
                    else
                    {
                        oc[oldname_('', key)] = r.ideal;
                        cc.optional.push(oc);
                    }
                }
                if (r.exact !== undefined && typeof r.exact !== 'number')
                {
                    cc.mandatory = cc.mandatory || {};
                    cc.mandatory[oldname_('', key)] = r.exact;
                }
                else
                {
                    ['min', 'max'].forEach(function(mix)
                    {
                        if (r[mix] !== undefined)
                        {
                            cc.mandatory = cc.mandatory || {};
                            cc.mandatory[oldname_(mix, key)] = r[mix];
                        }
                    });
                }
            });
            if (c.advanced)
            {
                cc.optional = (cc.optional || []).concat(c.advanced);
            }
            return cc;
        };

        var getUserMedia_ = function(constraints, onSuccess, onError)
        {
            constraints = JSON.parse(JSON.stringify(constraints));
            if (constraints.audio)
            {
                constraints.audio = constraintsToChrome_(constraints.audio);
            }
            if (constraints.video)
            {
                constraints.video = constraintsToChrome_(constraints.video);
            }
            return navigator.webkitGetUserMedia(constraints, onSuccess, onError);
        };
        navigator.getUserMedia = getUserMedia_;

        // Returns the result of getUserMedia as a Promise.
        var getUserMediaPromise_ = function(constraints)
        {
            return new Promise(function(resolve, reject)
            {
                navigator.getUserMedia(constraints, resolve, reject);
            });
        };

        if (!navigator.mediaDevices)
        {
            navigator.mediaDevices =
            {
                getUserMedia: getUserMediaPromise_,
                enumerateDevices: function()
                {
                    return new Promise(function(resolve)
                    {
                        var kinds = {audio: 'audioinput', video: 'videoinput'};
                        return MediaStreamTrack.getSources(function(devices)
                        {
                            resolve(devices.map(function(device)
                            {
                                return {label: device.label, kind: kinds[device.kind], deviceId: device.id, groupId: ''};
                            }));
                        });
                    });
                }
            };
        }

        if (!navigator.mediaDevices.getUserMedia)
        {
            navigator.mediaDevices.getUserMedia = function(constraints)
            {
                return getUserMediaPromise_(constraints);
            };
        }

        if (navigator.mediaDevices.getUserMedia)
        {
            var p = navigator.mediaDevices.getUserMedia({ audio: true, video: false });

            p.then(function(mediaStream)
            {
                localStream = mediaStream;

                mediaSocket = io("{{serverToken}}" + ':9001/media', { query: "sessId=" + "{{sessionId}}" });
                initMedia();
                boardSocket = io("{{serverToken}}" + ':9001/board', { query: "sessId=" + "{{sessionId}}" });
                initBoard();
            });
            p.catch(function(err) { console.log(err.name); });
        }
        else
        {
            console.log("getUserMedia not supported");
        }

        function initBoard()
        {
            boardSocket.on('READY', function(userId)
            {
                // TODO: Implement server options.
                whiteBoardController = new WhiteBoardController("{{isHost}}" === "TRUE", userId, false, true, workerUrlGlobal, componentFiles);
                whiteBoardView = ReactDOM.render(React.createElement(WhiteBoardView, {controller: whiteBoardController}), document.getElementById('whiteboard-app'));
                whiteBoardController.setView(whiteBoardView);
                console.log('Received ready and emitted join room.');

                boardSocket.on('CONNOK', function()
                {
                    whiteBoardController.setSocket(boardSocket);
                });

                boardSocket.emit('JOIN-ROOM', "{{roomToken}}");
            });
        }

        function initMedia()
        {
            mediaSocket.on('READY', function(userId)
            {
                peerHandler = new PeerHandler("{{roomToken}}", {}, mediaSocket);
                console.log("{{isHost}}" === "TRUE");
                medCont = ReactDOM.render(React.createElement(MediaContainer, {isHost: "{{isHost}}" === "TRUE"}), document.getElementById('media-app'));

                medCont.setStream(localStream);
                medCont.setHandler(peerHandler, userId);
            });
        }
    </script>
{% endblock %}

{% block tests %}
    {{ parent() }}

{% endblock %}
